version: 2

defaults: &defaults
  working_directory: ~/repo

filter_ignore_main: &filter_ignore_main
  filters:
    branches:
      ignore:
        - main
        - /^release.*/
    tags:
      only:
        - /^v.*/

filter_only_develop_or_tag: &filter_only_develop_or_tag
  filters:
    branches:
      only:
        - develop
    tags:
      only:
        - /^v.*/

references:
  restore_repo: &restore_repo
    restore_cache:
      key: v1-repo-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
  save_repo: &save_repo
    save_cache:
      key: v1-repo-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      paths:
        - .
  restore_npm: &restore_npm
    restore_cache:
      key: v1-npm-{{ checksum "src/app/themes/main/frontend/package-lock.json" }}
  save_npm: &save_npm
    save_cache:
      key: v1-npm-{{ checksum "src/app/themes/main/frontend/package-lock.json" }}
      paths:
        - ~/repo/src/app/themes/main/frontend/node_modules
  restore_composer: &restore_composer
    restore_cache:
      key: v1-composer-{{ checksum "composer.lock" }}
  save_composer: &save_composer
    save_cache:
      key: v1-composer-{{ checksum "composer.lock" }}
      paths:
        - ~/repo/vendor
  restore_wp: &restore_wp
    restore_cache:
      key: v1-wordpress-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
  save_wp: &save_wp
    save_cache:
      key: v1-wordpress-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      paths:
        - ~/repo/src
  restore_frontend: &restore_frontend
    restore_cache:
      key: v1-frontend-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
  save_frontend: &save_frontend
    save_cache:
      key: v1-frontend-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      paths:
        - ~/repo/src/app/themes/main/dist
  restore_ansible: &restore_ansible
    restore_cache:
      key: v1-ansible-{{ checksum "deploy/requirements.txt" }}
  save_ansible: &save_ansible
    save_cache:
      key: v1-ansible-{{ checksum "deploy/requirements.txt" }}
      paths:
        - deploy/venv

jobs:
  checkout_code:
    <<: *defaults
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - *save_repo

  frontend:
    <<: *defaults
    docker:
      - image: circleci/node:14
    steps:
      - *restore_repo
      - *restore_npm
      - run: cd src/app/themes/main/frontend && npm install
      - *save_npm
      - run: cd src/app/themes/main/frontend && npm run build:production
      - *save_frontend

  wordpress:
    <<: *defaults
    docker:
      - image: circleci/php:7.4-fpm-node-browsers
      - image: circleci/mysql:5
    steps:
      - *restore_repo
      - *restore_composer
      - run:
          name: Install PHP Extensions
          command: |
            sudo apt-get update
            sudo apt-get install -y libpng-dev
            sudo docker-php-ext-install gd
      - run:
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('https://composer.github.io/installer.sig'))) { echo 'Installer verified'; } else { echo 'Installer invalid'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
      - run:
          command: |
            ACF_PRO_KEY=$ACF_PRO_KEY php composer.phar install --no-scripts --optimize-autoloader --no-dev
      - *save_composer
      - *save_wp

  ansible:
    <<: *defaults
    docker:
      - image: circleci/python:3.9
    steps:
      - *restore_repo
      - *restore_ansible
      - run:
          command: |
            cd deploy
            python3 -m venv venv
            . venv/bin/activate
            pip install -U pip
            pip install -r requirements.txt
      - *save_ansible

  deploy:
    <<: *defaults
    docker:
      - image: circleci/python:3.9
    steps:
      - *restore_repo
      - *restore_wp
      - *restore_composer
      - *restore_frontend
      - *restore_ansible
      - run: rm -rf src/app/themes/main/frontend
      - run:
          command: |
            cd deploy
            sudo apt-get -y -qq install rsync
            . venv/bin/activate
            ansible-galaxy install -r requirements.yml

            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              ansible-playbook deploy.yml -i stages/stage.yml
            fi

            if [ "${CIRCLE_TAG}" ]; then
              ansible-playbook deploy.yml -i stages/prod.yml
            fi

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - checkout_code:
          <<: *filter_ignore_main
      - frontend:
          <<: *filter_ignore_main
          requires:
            - checkout_code
      - wordpress:
          <<: *filter_ignore_main
          context:
            - ACF_PRO_KEY
          requires:
            - checkout_code
      - ansible:
          <<: *filter_ignore_main
          requires:
            - checkout_code
      - deploy:
          <<: *filter_only_develop_or_tag
          requires:
            - frontend
            - wordpress
            - ansible

